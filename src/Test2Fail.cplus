#include <gtkmm.h>
#include <sqlite3.h>
#include <iostream>
#include <string>

// Function to validate user credentials
bool validate_user(const std::string& username, const std::string& password, std::string& role) {
    sqlite3* db;
    sqlite3_stmt* stmt;
    int rc = sqlite3_open("users.db", &db);

    if (rc != SQLITE_OK) {
        std::cerr << "Cannot open database: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_close(db);
        return false;
    }

    std::string query = "SELECT role FROM users WHERE username = ? AND password = ?";
    rc = sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, nullptr);

    if (rc != SQLITE_OK) {
        std::cerr << "Failed to prepare statement: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_close(db);
        return false;
    }

    sqlite3_bind_text(stmt, 1, username.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, password.c_str(), -1, SQLITE_STATIC);

    rc = sqlite3_step(stmt);
    if (rc == SQLITE_ROW) {
        role = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));
        sqlite3_finalize(stmt);
        sqlite3_close(db);
        return true;
    }

    sqlite3_finalize(stmt);
    sqlite3_close(db);
    return false;
}

// Admin Window Class
class AdminWindow : public Gtk::Window {
public:
    AdminWindow() {
        set_title("Admin Panel");
        set_default_size(400, 400);

        grid.set_margin_top(10);
        grid.set_margin_bottom(10);
        grid.set_margin_start(10);
        grid.set_margin_end(10);
        grid.set_row_spacing(10);
        grid.set_column_spacing(10);
        add(grid);

        grid.attach(lbl_user_id, 0, 0, 1, 1);
        grid.attach(entry_user_id, 1, 0, 1, 1);

        grid.attach(lbl_first_name, 0, 1, 1, 1);
        grid.attach(entry_first_name, 1, 1, 1, 1);

        grid.attach(lbl_last_name, 0, 2, 1, 1);
        grid.attach(entry_last_name, 1, 2, 1, 1);

        grid.attach(lbl_phone, 0, 3, 1, 1);
        grid.attach(entry_phone, 1, 3, 1, 1);

        grid.attach(lbl_email, 0, 4, 1, 1);
        grid.attach(entry_email, 1, 4, 1, 1);

        grid.attach(lbl_address, 0, 5, 1, 1);
        grid.attach(entry_address, 1, 5, 1, 1);

        btn_register.set_label("Register User");
        btn_register.signal_clicked().connect(sigc::mem_fun(*this, &AdminWindow::on_register_user));
        grid.attach(btn_register, 0, 6, 2, 1);

        show_all_children();
    }

private:
    Gtk::Grid grid;
    Gtk::Label lbl_user_id{"User ID:"};
    Gtk::Label lbl_first_name{"First Name:"};
    Gtk::Label lbl_last_name{"Last Name:"};
    Gtk::Label lbl_phone{"Phone No:"};
    Gtk::Label lbl_email{"Email ID:"};
    Gtk::Label lbl_address{"Address:"};

    Gtk::Entry entry_user_id;
    Gtk::Entry entry_first_name;
    Gtk::Entry entry_last_name;
    Gtk::Entry entry_phone;
    Gtk::Entry entry_email;
    Gtk::Entry entry_address;

    Gtk::Button btn_register;

    void on_register_user() {
        std::string user_id = entry_user_id.get_text();
        std::string first_name = entry_first_name.get_text();
        std::string last_name = entry_last_name.get_text();
        std::string phone = entry_phone.get_text();
        std::string email = entry_email.get_text();
        std::string address = entry_address.get_text();

        if (user_id.empty() || first_name.empty() || last_name.empty() || phone.empty() || email.empty() || address.empty()) {
            Gtk::MessageDialog dialog(*this, "All fields are required!", false, Gtk::MESSAGE_ERROR);
            dialog.run();
            return;
        }

        sqlite3* db;
        int rc = sqlite3_open("users.db", &db);

        if (rc != SQLITE_OK) {
            Gtk::MessageDialog dialog(*this, "Failed to open database!", false, Gtk::MESSAGE_ERROR);
            dialog.run();
            return;
        }

        std::string query = "INSERT INTO user_details (user_id, first_name, last_name, phone, email, address) VALUES (?, ?, ?, ?, ?, ?);";
        sqlite3_stmt* stmt;
        rc = sqlite3_prepare_v2(db, query.c_str(), -1, &stmt, nullptr);

        if (rc != SQLITE_OK) {
            Gtk::MessageDialog dialog(*this, "Failed to prepare database query!", false, Gtk::MESSAGE_ERROR);
            dialog.run();
            sqlite3_close(db);
            return;
        }

        sqlite3_bind_text(stmt, 1, user_id.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 2, first_name.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 3, last_name.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 4, phone.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 5, email.c_str(), -1, SQLITE_STATIC);
        sqlite3_bind_text(stmt, 6, address.c_str(), -1, SQLITE_STATIC);

        rc = sqlite3_step(stmt);
        if (rc == SQLITE_DONE) {
            Gtk::MessageDialog dialog(*this, "User registered successfully!", false, Gtk::MESSAGE_INFO);
            dialog.run();

            entry_user_id.set_text("");
            entry_first_name.set_text("");
            entry_last_name.set_text("");
            entry_phone.set_text("");
            entry_email.set_text("");
            entry_address.set_text("");
        } else {
            Gtk::MessageDialog dialog(*this, "Failed to register user!", false, Gtk::MESSAGE_ERROR);
            dialog.run();
        }

        sqlite3_finalize(stmt);
        sqlite3_close(db);
    }
};

// Login Window Class
class LoginWindow : public Gtk::Window {
public:
    LoginWindow() {
        set_title("Login");
        set_default_size(300, 200);

        vbox.set_margin_top(10);
        vbox.set_margin_bottom(10);
        vbox.set_margin_start(10);
        vbox.set_margin_end(10);
        add(vbox);

        lbl_username.set_text("Username:");
        vbox.pack_start(lbl_username, Gtk::PACK_SHRINK);
        vbox.pack_start(entry_username, Gtk::PACK_SHRINK);

        lbl_password.set_text("Password:");
        vbox.pack_start(lbl_password, Gtk::PACK_SHRINK);
        entry_password.set_visibility(false);
        vbox.pack_start(entry_password, Gtk::PACK_SHRINK);

        btn_login.set_label("Login");
        btn_login.signal_clicked().connect(sigc::mem_fun(*this, &LoginWindow::on_login_clicked));
        vbox.pack_start(btn_login, Gtk::PACK_SHRINK);

        show_all_children();
    }

private:
    Gtk::Box vbox{Gtk::ORIENTATION_VERTICAL};
    Gtk::Label lbl_username;
    Gtk::Label lbl_password;
    Gtk::Entry entry_username;
    Gtk::Entry entry_password;
    Gtk::Button btn_login;

    void on_login_clicked() {
    std::string username = entry_username.get_text();
    std::string password = entry_password.get_text();
    std::string role;

    if (validate_user(username, password, role)) {
        if (role == "admin") {
            auto admin_window = new AdminWindow(); // Create AdminWindow
            admin_window->set_transient_for(*this); // Optional: Set LoginWindow as parent
            admin_window->show();                  // Show AdminWindow
            hide();                                // Hide the LoginWindow
        } else {
            Gtk::MessageDialog dialog(*this, "Access restricted to admin users!", false, Gtk::MESSAGE_ERROR);
            dialog.run();
        }
        } else {
            Gtk::MessageDialog dialog(*this, "Invalid credentials!", false, Gtk::MESSAGE_ERROR);
            dialog.run();
        }
    }


    // void on_login_clicked() {
    //     std::string username = entry_username.get_text();
    //     std::string password = entry_password.get_text();
    //     std::string role;

    //     if (validate_user(username, password, role)) {
    //         if (role == "admin") {
    //             AdminWindow* admin_window = new AdminWindow();
    //             admin_window->show();
    //             this->hide();
    //         } else {
    //             Gtk::MessageDialog dialog(*this, "Access restricted to admin users!", false, Gtk::MESSAGE_ERROR);
    //             dialog.run();
    //         }
    //     } else {
    //         Gtk::MessageDialog dialog(*this, "Invalid credentials!", false, Gtk::MESSAGE_ERROR);
    //         dialog.run();
    //     }
    // }
};




// Main Function
int main(int argc, char* argv[]) {
    auto app = Gtk::Application::create(argc, argv, "com.example.adminpanel");

    // Create database and tables if not exist
    sqlite3* db;
    int rc = sqlite3_open("users.db", &db);
    if (rc == SQLITE_OK) {
        const char* create_users_table = R"(
            CREATE TABLE IF NOT EXISTS users (
                username TEXT PRIMARY KEY,
                password TEXT NOT NULL,
                role TEXT NOT NULL
            );
        )";
        sqlite3_exec(db, create_users_table, nullptr, nullptr, nullptr);

        const char* create_user_details_table = R"(
            CREATE TABLE IF NOT EXISTS user_details (
                user_id TEXT PRIMARY KEY,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                phone TEXT NOT NULL,
                email TEXT NOT NULL,
                address TEXT NOT NULL
            );
        )";
        sqlite3_exec(db, create_user_details_table, nullptr, nullptr, nullptr);

        // Insert default admin user
        const char* insert_admin = R"(
            INSERT OR IGNORE INTO users (username, password, role)
            VALUES ('admin', 'admin123', 'admin');
        )";
        sqlite3_exec(db, insert_admin, nullptr, nullptr, nullptr);
    }
    sqlite3_close(db);

    LoginWindow login_window;
    return app->run(login_window);
}
